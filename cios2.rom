#!/usr/bin/env python2

header = __header__

def find_code(fs, code = None):
    code = code if code is not None else[]

    def recurse( (key, value) ):        
        if value.__class__.__name__ == "str":
            lines = value.split("\n")
	    if lines.__len__() > 3:
            	if lines[2] == "#$ CIOS HEADER $#":
		    data = {}
		    for line in lines:
			match = header.match(line)
		        if match is not None: 
		            name, define = match.group(1, 2)
		            data[name.lower()] = define
		    data["code"] = value
                    code.append(data)
        else:
            print("Ignored:", key, repr(value.__class__))
    fs.walk(recurse)
    
    return code

def print(*args):
    __files__["stdout"] = " ".join(args)
    __files__["stdout"] = "\n"

def input(prompt):
    __files__["stdout"] = prompt
    return int(__files__["stdin"])

def clear_screen():
    __files__["stdout"] = "\033[2J\033[0;0H"

kernels = find_code(__files__)

if kernels.__len__() > 1:
    for num, kernel in enumerate(kernels, 0):
	print(num, ":", kernel.get("name", "Kernel"), kernel.get("version", ""))

	num = input("Kernel number: ")
	code = kernels[num]["code"]

	print(num)
elif kernels.__len__() == 1:
    code = kernels[0]["code"]
else:
    code = "raise OSError, \"No bootable medium detected.\""

class RestartNow(SystemInterrupt): pass

del header

__backup__ = {}
__backup__.update(__dict__)

while True:
    try:
        exec code in __dict__
    except RestartNow:
        clear_screen()

        __dict__ = {}
        __dict__.update(__backup__)
        continue
    break
